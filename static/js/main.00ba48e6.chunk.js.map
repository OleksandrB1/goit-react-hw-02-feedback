{"version":3,"sources":["components/Feedback/Feedback.js","components/Statistics/Statistics.js","components/Notification/Notification.js","components/Section/Section.js","App.js","reportWebVitals.js","index.js","components/Statistics/Statistics.module.css","components/Feedback/Feedback.module.css"],"names":["FeedbackOptions","options","onLeaveFeedback","className","s","feedbackControls","map","item","button","onClick","type","Statistics","good","neutral","bad","total","positivePercentage","statisticsContainer","value","Notification","message","Section","title","children","App","state","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","clickButton","event","name","target","textContent","setState","prevState","this","Feedback","Object","keys","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"gRA0BeA,EAtBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,8BACE,qBAAKC,UAAWC,IAAEC,iBAAlB,SACGJ,EAAQK,KAAI,SAACC,GAAD,OACX,wBAEEJ,UAAWC,IAAEI,OACbC,QAASP,EACTQ,KAAK,SAJP,SAMGH,GALIA,W,gBCaAI,EAlBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,sBAAKb,UAAWC,IAAEa,oBAAlB,UACE,uBAAMd,UAAWC,IAAEc,MAAnB,mBAAiCN,KACjC,uBAAMT,UAAWC,IAAEc,MAAnB,sBAAoCL,KACpC,uBAAMV,UAAWC,IAAEc,MAAnB,kBAAgCJ,KAChC,uBAAMX,UAAWC,IAAEc,MAAnB,oBAAkCH,KAClC,uBAAMZ,UAAWC,IAAEc,MAAnB,gCAA8CF,EAA9C,WCGWG,EAVM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACnB,8BACE,6BAAKA,OCSMC,EAXC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,oCACE,6BAAKD,IACJC,MCACC,E,4MACJC,MAAQ,CACNb,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPY,mBAAqB,WACnB,MAA+B,EAAKD,MACpC,OADA,EAAQb,KAAR,EAAcC,QAAd,EAAuBC,K,EAGzBa,gCAAkC,WAChC,OAAOC,KAAKC,MAAO,EAAKJ,MAAMb,KAAO,EAAKc,qBAAwB,M,EAGpEI,YAAc,SAACC,GACb,IAAMC,EAAOD,EAAME,OAAOC,YAC1B,EAAKC,UAAS,SAACC,GAAD,sBACXJ,EAAOI,EAAUJ,GAAQ,O,4CAI9B,WACE,MAA+BK,KAAKZ,MAA5Bb,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAEvB,OACE,gCACE,cAAC,EAAD,CAASQ,MAAM,wBAAf,SACE,cAACgB,EAAD,CACErC,QAASsC,OAAOC,KAAKH,KAAKZ,OAC1BvB,gBAAiBmC,KAAKP,gBAG1B,cAAC,EAAD,CAASR,MAAM,aAAf,SACGe,KAAKX,qBAAuB,EAC3B,cAAC,EAAD,CACEd,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOsB,KAAKX,qBACZV,mBAAoBqB,KAAKV,oCAG3B,cAAC,EAAD,CAAcP,QAAQ,+B,GA3ChBqB,aAmDHjB,IC7CAkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,oBAAsB,wCAAwC,MAAQ,4B,kBCAxFD,EAAOC,QAAU,CAAC,iBAAmB,mCAAmC,OAAS,yBAAyB,WAAa,gC","file":"static/js/main.00ba48e6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport s from \"./Feedback.module.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\r\n  <div>\r\n    <div className={s.feedbackControls}>\r\n      {options.map((item) => (\r\n        <button\r\n          key={item}\r\n          className={s.button}\r\n          onClick={onLeaveFeedback}\r\n          type=\"button\"\r\n        >\r\n          {item}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import React from \"react\";\r\nimport s from \"./Statistics.module.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\r\n  <div className={s.statisticsContainer}>\r\n    <span className={s.value}>Good: {good}</span>\r\n    <span className={s.value}>Neutral: {neutral}</span>\r\n    <span className={s.value}>Bad: {bad}</span>\r\n    <span className={s.value}>Total: {total}</span>\r\n    <span className={s.value}>Positive feedback: {positivePercentage}%</span>\r\n  </div>\r\n);\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.func.isRequired,\r\n  positivePercentage: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Notification = ({ message }) => (\r\n  <div>\r\n    <h2>{message}</h2>\r\n  </div>\r\n);\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Section = ({ title, children }) => (\r\n  <section>\r\n    <h2>{title}</h2>\r\n    {children}\r\n  </section>\r\n);\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import React, { Component } from \"react\";\nimport FeedbackOptions from \"./components/Feedback/Feedback\";\nimport Statistics from \"./components/Statistics/Statistics\";\nimport Notification from \"./components/Notification/Notification\";\nimport Section from \"./components/Section/Section\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n  countPositiveFeedbackPercentage = () => {\n    return Math.round((this.state.good / this.countTotalFeedback()) * 100);\n  };\n\n  clickButton = (event) => {\n    const name = event.target.textContent;\n    this.setState((prevState) => ({\n      [name]: prevState[name] + 1,\n    }));\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n\n    return (\n      <div>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={Object.keys(this.state)}\n            onLeaveFeedback={this.clickButton}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          {this.countTotalFeedback() > 0 ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statisticsContainer\":\"Statistics_statisticsContainer__2aV9j\",\"value\":\"Statistics_value__28yc8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"feedbackControls\":\"Feedback_feedbackControls__3kf7w\",\"button\":\"Feedback_button__1c5Wz\",\"statistics\":\"Feedback_statistics__2SC31\"};"],"sourceRoot":""}